<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="271a3919-cd7f-46ea-b33f-888b84a68a85" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Update Delete Multiple DEs Via Async API With HTTPPost" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config">
  <con:description>Creates, retrieves, updates, and deletes a nonsendable data extension via Async API.  No ConversationID is involved.

Confirms that each Async request is queued and status = OK. Also confirms HTTP status codes. 

Also confirms:

* Create request is successful (retrieve by CustomerKey yields an object ID)
* Update request is successful (object is updated as expected)
* Delete request is successful (get by category ID -- object ID is not present in the result)
* HTTPPost sent payloads back to the configured Postback URL (here it's FuelBin)
* HTTPPost payloads contain create/update/delete confirmations and CustomerKey</con:description>
  <con:settings>
    <con:setting id="82f0b56c-e0ce-4ae2-b908-b5ba8d3866c7fileName">Create-Retrieve-Update-Delete-NonSendable-Data-Extension-Via-Async-API-With-HTTPPost--No-Conversation-ID</con:setting>
    <con:setting id="271a3919-cd7f-46ea-b33f-888b84a68a85fileName">Create-Update-Delete-Multiple-DEs-Via-Async-API-With-HTTPPost</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="calltestcase" name="Auth" id="05e2f8f3-12c3-4b2b-9a6c-2ddf1a1185c7" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>5b64a7c3-23e7-49bc-83fe-9983c3df8feb</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>accessToken</con:name>
          <con:value>aiZ7TvHA3R2S0wy7MO4ntboc</con:value>
        </con:property>
        <con:property>
          <con:name>userid</con:name>
          <con:value xsi:nil="true"/>
        </con:property>
        <con:property>
          <con:name>mid</con:name>
          <con:value xsi:nil="true"/>
        </con:property>
      </con:properties>
      <con:returnProperties>
        <con:entry>accesstoken</con:entry>
        <con:entry>userid</con:entry>
        <con:entry>mid</con:entry>
      </con:returnProperties>
      <con:runMode>PARALLELL</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="RequestAuth - Request 1" id="72098724-bd89-4c99-afea-269601e69366">
    <con:settings/>
    <con:config service="Auth" resourcePath="/v1/requestToken" methodName="RequestAuth" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="RequestAuth - Request 1" id="cd080263-4158-4399-87d7-e0540300f461" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
   "clientId": "${#Project#clientid}",
   "clientSecret": "${#Project#clientsecret}"
}</con:request>
        <con:originalUri>https://auth-qa3s1.exacttargetapis.com/v1/requestToken</con:originalUri>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:parameterOrder>
          <con:entry>legacy</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="Property Transfer auth" id="523b2fe1-db53-4ea1-970a-2c4f4cbc0232">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
        <con:name>transfer token</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>RequestAuth - Request 1</con:sourceStep>
        <con:sourcePath>declare namespace ns1='https://auth-qa3s1.exacttargetapis.com/v1/requestToken';
//ns1:Response[1]/ns1:accessToken[1]</con:sourcePath>
        <con:targetType>accessToken</con:targetType>
        <con:targetStep>#TestCase#</con:targetStep>
        <con:targetPath/>
        <con:upgraded>true</con:upgraded>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Create New FuelBin" id="91bbad65-d941-457e-aa3f-998fecee2d5a">
    <con:settings/>
    <con:config service="FuelBin" resourcePath="/bin" methodName="Create New FuelBin ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Create New FuelBin" id="ecce9464-96a2-45a7-9668-dab62f8c6fc3" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>https://fuelbin.dev.marketingcloudapps.com</con:endpoint>
        <con:request/>
        <con:originalUri>https://fuelbin.int.marketingcloudapps.com/bin</con:originalUri>
        <con:assertion type="JsonPath Existence Match" id="4f06ff23-e27d-4268-99f3-73266e8374c4" name="Check for existence of [id]">
          <con:configuration>
            <path>$.id</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script To Generate CustomerKey For DE1" id="bc082335-57aa-400d-877d-e5b01b05d3c3">
    <con:settings/>
    <con:config>
      <script>def generator = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}

"DE New Field " + generator( ('A'..'Z').join(), 9 ) + "_QETesting"</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script To Generate CustomerKey For DE2" id="bf540dc0-77ad-479e-a69c-6c4caefd5fa8">
    <con:settings/>
    <con:config>
      <script>def generator = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}

"DE New Field " + generator( ('A'..'Z').join(), 9 ) + "_QETesting"</script>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="46f4a0da-1f0c-49fe-a1a0-7168b277adce" name="Create DEs">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>ETFramework</con:interface>
      <con:operation>Create</con:operation>
      <con:request name="Create DEs" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="11b6e56f-6ffe-453e-9ac8-cceccf7e4653" defaultOutgoingWss="" defaultIncomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${soapapiendpoint}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <soapenv:Header>
     <h:fueloauth xmlns="http://exacttarget.com" xmlns:h="http://exacttarget.com">${#TestCase#accessToken}</h:fueloauth>
  </soapenv:Header>
  <soapenv:Body>
    <CreateRequest xmlns="http://exacttarget.com/wsdl/partnerAPI">
      <Objects xsi:type="DataExtension">
            <PartnerKey xsi:nil="true"/>
            <ObjectID xsi:nil="true"/>
            <Name>${Groovy Script To Generate CustomerKey For DE1#result}</Name>
            <IsSendable>false</IsSendable>
            <Fields>
               <Field>
                  <Name>EmailAddress_type</Name>
                  <FieldType>EmailAddress</FieldType>
                  <IsPrimaryKey>true</IsPrimaryKey>
                  <IsRequired>true</IsRequired>
               </Field>
               <Field>
                  <Name>Text_type</Name>
                  <FieldType>Text</FieldType>
                  <IsRequired>false</IsRequired>
               </Field>
               <Field>
                  <Name>Date_type</Name>
                  <FieldType>Date</FieldType>
                  <DefaultValue>getdate()</DefaultValue>
                  <IsRequired>true</IsRequired>
               </Field>
               <Field>
                  <Name>Decimal_type</Name>
                  <FieldType>Decimal</FieldType>
                  <IsRequired>true</IsRequired>
                  <Precision>10</Precision>
                  <Scale>2</Scale>
               </Field>
               <Field>
                  <Name>Boolean_type</Name>
                  <FieldType>Boolean</FieldType>
                  <DefaultValue>true</DefaultValue>
                  <IsRequired>true</IsRequired>
               </Field>
               <Field>
                  <Name>Number_type</Name>
                  <FieldType>Number</FieldType>
                  <IsRequired>false</IsRequired>
               </Field>
               <Field>
                  <Name>Phone_type</Name>
                  <FieldType>Phone</FieldType>
                  <IsRequired>false</IsRequired>
               </Field>
               <Field>
                  <Name>Locale_type</Name>
                  <FieldType>Locale</FieldType>
                  <IsRequired>false</IsRequired>
               </Field>
            </Fields>
                        <Properties>
               <Property>
                  <Name>EmailAddress</Name>
                  <Value>johndoe@example.com</Value>
               </Property>
               <Property>
                  <Name>FirstName</Name>
                  <Value>John</Value>
               </Property>
               <Property>
                  <Name>LastName</Name>
                  <Value>Doe</Value>
               </Property>
               <Property>
                  <Name>PrimaryKey</Name>
                  <Value>PrimaryKey</Value>
               </Property>
           </Properties>
            <CustomerKey>${Groovy Script To Generate CustomerKey For DE1#result}</CustomerKey>
         </Objects>
         <Objects xsi:type="DataExtension">
            <PartnerKey xsi:nil="true"/>
            <ObjectID xsi:nil="true"/>
            <Name>${Groovy Script To Generate CustomerKey For DE2#result}</Name>
            <IsSendable>false</IsSendable>
            <Fields>
               <Field>
                  <Name>EmailAddress_type</Name>
                  <FieldType>EmailAddress</FieldType>
                  <IsPrimaryKey>true</IsPrimaryKey>
                  <IsRequired>true</IsRequired>
               </Field>
               <Field>
                  <Name>Text_type</Name>
                  <FieldType>Text</FieldType>
                  <IsRequired>false</IsRequired>
               </Field>
               <Field>
                  <Name>Date_type</Name>
                  <FieldType>Date</FieldType>
                  <DefaultValue>getdate()</DefaultValue>
                  <IsRequired>true</IsRequired>
               </Field>
               <Field>
                  <Name>Decimal_type</Name>
                  <FieldType>Decimal</FieldType>
                  <IsRequired>true</IsRequired>
                  <Precision>10</Precision>
                  <Scale>2</Scale>
               </Field>
               <Field>
                  <Name>Boolean_type</Name>
                  <FieldType>Boolean</FieldType>
                  <DefaultValue>true</DefaultValue>
                  <IsRequired>true</IsRequired>
               </Field>
               <Field>
                  <Name>Number_type</Name>
                  <FieldType>Number</FieldType>
                  <IsRequired>false</IsRequired>
               </Field>
               <Field>
                  <Name>Phone_type</Name>
                  <FieldType>Phone</FieldType>
                  <IsRequired>false</IsRequired>
               </Field>
               <Field>
                  <Name>Locale_type</Name>
                  <FieldType>Locale</FieldType>
                  <IsRequired>false</IsRequired>
               </Field>
            </Fields>
                        <Properties>
               <Property>
                  <Name>EmailAddress</Name>
                  <Value>johndoe@example.com</Value>
               </Property>
               <Property>
                  <Name>FirstName</Name>
                  <Value>John</Value>
               </Property>
               <Property>
                  <Name>LastName</Name>
                  <Value>Doe</Value>
               </Property>
               <Property>
                  <Name>PrimaryKey</Name>
                  <Value>PrimaryKey</Value>
               </Property>
           </Properties>
            <CustomerKey>${Groovy Script To Generate CustomerKey For DE2#result}</CustomerKey>
         </Objects>
         <Options>
   <SendResponseTo>
      <ResponseType>HTTPPost</ResponseType>
      <ResponseAddress>${#Project#fuelbinendpoint}/${Create New FuelBin#Response#$.id}</ResponseAddress>
      <RespondWhen>Always</RespondWhen>
      <IncludeResults>true</IncludeResults>
      <IncludeObjects>true</IncludeObjects>
   </SendResponseTo>
   
   <OrdinalID>0</OrdinalID>
   <RequestType>Asynchronous</RequestType>
</Options>
   </CreateRequest>
  </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="f6ae2dd4-58cd-4acf-943c-520e4d55e9be" name="SOAP Response"/>
        <con:assertion type="XPath Match" id="7ed04654-0839-4744-b05b-608bba04a20e" name="Match content of [StatusCode]">
          <con:configuration>
            <path>declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI';
//ns1:CreateResponse[1]/ns1:Results[1]/ns1:StatusCode[1]/text()</path>
            <content>OK</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" id="cf55b716-1ee7-4135-b18e-57197d8949aa" name="Match content of [StatusMessage]">
          <con:configuration>
            <path>declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI';
//ns1:CreateResponse[1]/ns1:Results[1]/ns1:StatusMessage[1]/text()</path>
            <content>Queued</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Valid HTTP Status Codes" id="abd95715-cbe1-4e3f-bd65-a20c98c8b7f7" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="Create"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" name="Retrieve DE 1 to Confirm Create" id="f48a206c-d1c1-4c3c-8df2-9085583464d0">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>ETFramework</con:interface>
      <con:operation>Retrieve</con:operation>
      <con:request name="Retrieve DE 1 to Confirm Create" id="d9412851-a03e-493f-b996-c89f86b4d693" defaultOutgoingWss="" defaultIncomingWss="" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${soapapiendpoint}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <soapenv:Header>
     <h:fueloauth xmlns="http://exacttarget.com" xmlns:h="http://exacttarget.com">${#TestCase#accessToken}</h:fueloauth>
  </soapenv:Header>
   <soapenv:Body>
      <RetrieveRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">
      <RetrieveRequest>
         <ObjectType>DataExtension</ObjectType>
         <Properties>ObjectID</Properties>
         <Properties>CustomerKey</Properties>
         <Properties>Name</Properties>
         <Properties>IsSendable</Properties>
         <Properties>CategoryID</Properties>
         <Filter xsi:type="SimpleFilterPart">
            <Property>CustomerKey</Property>
            <SimpleOperator>equals</SimpleOperator>
            <Value>${Groovy Script To Generate CustomerKey For DE1#result}</Value>
         </Filter>
      </RetrieveRequest>
   </RetrieveRequestMsg>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="47853253-cfed-4fd7-b9cc-fbf80534a1a8"/>
        <con:assertion type="XPath Match" id="9ca11bb7-46a9-41a3-9a37-4f103fd4d9c2" name="Check for existence of [ObjectID]" disabled="true">
          <con:configuration>
            <path>declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI';
exists( //ns1:RetrieveResponseMsg/ns1:Results/ns1:ObjectID)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Confirm Create of DE 1" id="a5289936-5917-4b9d-b1db-08622f994d07">
    <con:settings/>
    <con:config>
      <script>import groovy.util.XmlSlurper

def response = new XmlSlurper().parseText(context.expand( '${Retrieve DE 1 to Confirm Create#Response#declare namespace ns1=\'http://exacttarget.com/wsdl/partnerAPI\'; //ns1:RetrieveResponseMsg[1]}' ))

if( context.loopIndex == null )
context.loopIndex = 0
def numberOfTimes = context.expand( '${#TestCase#numberOfTimes}' ).toInteger()


if ( response.Results.ObjectID.size() == 0 ) {
  if ( ++context.loopIndex &lt;  numberOfTimes ) {
    log.info "DE 1 not created yet"
    sleep(1000)
    testRunner.gotoStepByName( "Retrieve DE 1 to Confirm Create" )
  }
  else {
    log.info "Timeout, test should fail"
    testRunner.fail("DE 1 not created after " + numberOfTimes.toString() + " retrieve attempts, timing out")
  }
}
else {
  log.info "DE 1 created"
  testRunner.gotoStepByName( "Retrieve DE 2 to Confirm Create" ) 
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="request" name="Retrieve DE 2 to Confirm Create" id="ec5e9a9c-5c83-4c2f-a48d-d7dc094f3960">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>ETFramework</con:interface>
      <con:operation>Retrieve</con:operation>
      <con:request name="Retrieve DE 2 to Confirm Create" id="d9412851-a03e-493f-b996-c89f86b4d693" defaultOutgoingWss="" defaultIncomingWss="" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${soapapiendpoint}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <soapenv:Header>
     <h:fueloauth xmlns="http://exacttarget.com" xmlns:h="http://exacttarget.com">${#TestCase#accessToken}</h:fueloauth>
  </soapenv:Header>
   <soapenv:Body>
      <RetrieveRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">
      <RetrieveRequest>
         <ObjectType>DataExtension</ObjectType>
         <Properties>ObjectID</Properties>
         <Properties>CustomerKey</Properties>
         <Properties>Name</Properties>
         <Properties>IsSendable</Properties>
         <Properties>CategoryID</Properties>
         <Filter xsi:type="SimpleFilterPart">
            <Property>CustomerKey</Property>
            <SimpleOperator>equals</SimpleOperator>
            <Value>${Groovy Script To Generate CustomerKey For DE2#result}</Value>
         </Filter>
      </RetrieveRequest>
   </RetrieveRequestMsg>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="47853253-cfed-4fd7-b9cc-fbf80534a1a8"/>
        <con:assertion type="XPath Match" id="9ca11bb7-46a9-41a3-9a37-4f103fd4d9c2" name="Check for existence of [ObjectID]" disabled="true">
          <con:configuration>
            <path>declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI';
exists( //ns1:RetrieveResponseMsg/ns1:Results/ns1:ObjectID)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Confirm Create of DE 2" id="1792c102-2a39-474e-8640-e90c311f2e58">
    <con:settings/>
    <con:config>
      <script>import groovy.util.XmlSlurper

def response = new XmlSlurper().parseText(context.expand( '${Retrieve DE 2 to Confirm Create#Response#declare namespace ns1=\'http://exacttarget.com/wsdl/partnerAPI\'; //ns1:RetrieveResponseMsg[1]}' ))

if( context.loopIndex == null )
context.loopIndex = 0
def numberOfTimes = context.expand( '${#TestCase#numberOfTimes}' ).toInteger()


if ( response.Results.ObjectID.size() == 0 ) {
  if ( ++context.loopIndex &lt;  numberOfTimes ) {
    log.info "DE 2 not created yet"
    sleep(1000)
    testRunner.gotoStepByName( "Retrieve DE 2 to Confirm Create" )
  }
  else {
    log.info "Timeout, test should fail"
    testRunner.fail("DE 2 not created after " + numberOfTimes.toString() + " retrieve attempts, timing out")
  }
}
else {
  log.info "DE 2 created"
  testRunner.gotoStepByName( "Groovy Script To Generate New Field Name For DE1" ) 
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script To Generate New Field Name For DE1" id="cb696e66-3066-49d1-9b58-26d0cd845ab0">
    <con:settings/>
    <con:config>
      <script>def generator = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}

"DE New Field " + generator( ('A'..'Z').join(), 9 ) + "_QETesting"</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script To Generate New Field Name For DE2" id="024c6554-1ae4-4335-aa8d-60a4557dd93c">
    <con:settings/>
    <con:config>
      <script>def generator = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}

"DE New Field " + generator( ('A'..'Z').join(), 9 ) + "_QETesting"</script>
    </con:config>
  </con:testStep>
  <con:testStep type="request" name="Update" id="39117ac2-48eb-40fa-97d9-307a0ab3b1e9">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>ETFramework</con:interface>
      <con:operation>Update</con:operation>
      <con:request name="Update" id="611c20da-e917-4e7a-bde1-dad4e1b4a31d" defaultOutgoingWss="" defaultIncomingWss="" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${soapapiendpoint}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <soapenv:Header>
     <h:fueloauth xmlns="http://exacttarget.com" xmlns:h="http://exacttarget.com">${#TestCase#accessToken}</h:fueloauth>
  </soapenv:Header>
  <soapenv:Body>
    <UpdateRequest xmlns="http://exacttarget.com/wsdl/partnerAPI">
      <Objects xsi:type="DataExtension">
            <PartnerKey xsi:nil="true"/>
            <ObjectID xsi:nil="true"/>
            <CustomerKey>${Groovy Script To Generate CustomerKey For DE1#result}</CustomerKey>
            <Fields>
               <Field>
                  <Name>${Groovy Script To Generate New Field Name For DE1#result}</Name>
                  <FieldType>Text</FieldType>
                  <IsRequired>false</IsRequired>
                  </Field>
               </Fields>
      </Objects>
      <Objects xsi:type="DataExtension">
            <PartnerKey xsi:nil="true"/>
            <ObjectID xsi:nil="true"/>
            <CustomerKey>${Groovy Script To Generate CustomerKey For DE2#result}</CustomerKey>
            <Fields>
               <Field>
                  <Name>${Groovy Script To Generate New Field Name For DE2#result}</Name>
                  <FieldType>Text</FieldType>
                  <IsRequired>false</IsRequired>
               </Field>
               </Fields>
      </Objects>
      <Options>
   <SendResponseTo>
      <ResponseType>HTTPPost</ResponseType>
      <ResponseAddress>${#Project#fuelbinendpoint}/${Create New FuelBin#Response#$.id}</ResponseAddress>
      <RespondWhen>Always</RespondWhen>
      <IncludeResults>true</IncludeResults>
      <IncludeObjects>true</IncludeObjects>
   </SendResponseTo>
   
   <OrdinalID>0</OrdinalID>
   <RequestType>Asynchronous</RequestType>
</Options>
   </UpdateRequest>
  </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="171e5fd4-311f-4028-97e6-2c1bfc889120"/>
        <con:assertion type="Valid HTTP Status Codes" id="daf26ef4-1b79-4dd5-9f9d-0314b5b2bea8" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" id="27806fe5-77dd-4df8-99fd-c85139aa5f0e" name="Match content of [StatusCode]">
          <con:configuration>
            <path>declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI';
//ns1:UpdateResponse[1]/ns1:Results[1]/ns1:StatusCode[1]/text()</path>
            <content>OK</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" id="dd582ed1-b61a-4c24-85fa-844a5da0cb2a" name="Match content of [StatusMessage]">
          <con:configuration>
            <path>declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI';
//ns1:UpdateResponse[1]/ns1:Results[1]/ns1:StatusMessage[1]/text()</path>
            <content>Queued</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Retrieve DE 1 to Confirm Update" id="4da4e8f8-7c3b-407d-bbcf-78cf662f5ccb">
    <con:settings/>
    <con:config service="APIs" resourcePath="/internal/v1/customobjects/{id}/fields" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Retrieve DE 1 to Confirm Update" id="ad54c941-16ec-47c7-b3de-3d99ee7835a9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request/>
        <con:originalUri>https://www.exacttargetapis.com/internal/v1/customobjects/14254305-1c8e-e511-8d32-ac162db027d0/fields</con:originalUri>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}"/>
          <con:entry key="id" value="${Retrieve DE 1 to Confirm Create#Response#declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI'; //ns1:RetrieveResponseMsg[1]/ns1:Results[1]/ns1:ObjectID[1]}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Confirm Update of DE 1" id="6ba4ac9a-1c0f-4ea7-89ba-15d8e9b38fc1">
    <con:settings/>
    <con:config>
      <script>import groovy.json.*

if( context.loopIndex == null )
context.loopIndex = 0
def numberOfTimes = context.expand( '${#TestCase#numberOfTimes}' ).toInteger()


def fields = new JsonSlurper().parseText(context.expand( '${Retrieve DE 1 to Confirm Update#Response#$.fields}' ))

//def DEName = context.expand( '${#TestCase#objectName}' )

def newField = context.expand( '${Update#RawRequest#declare namespace ns1=\'http://exacttarget.com/wsdl/partnerAPI\'; //ns1:UpdateRequest[1]/ns1:Objects[1]/ns1:Fields[1]/ns1:Field[1]/ns1:Name[1]}' )

if (!fields.find { newField in it.name }) {
  if ( ++context.loopIndex &lt;  numberOfTimes ) {
    log.info "DE 1 not updated yet"
    sleep(1000)
      testRunner.gotoStepByName( "Retrieve DE 1 to Confirm Update" )
  }
  else {
    log.info "Timeout, this test should fail"
    testRunner.fail("DE not updated after " + numberOfTimes.toString() + " retrieve attempts, timing out")
  }
}
else {
  log.info "DE 1 updated"
  testRunner.gotoStepByName( "Retrieve DE 2 to Confirm Update" ) 
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Retrieve DE 2 to Confirm Update" id="02e8b0ac-2069-40cf-8897-3181b2a261af">
    <con:settings/>
    <con:config service="APIs" resourcePath="/internal/v1/customobjects/{id}/fields" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Retrieve DE 2 to Confirm Update" id="ad54c941-16ec-47c7-b3de-3d99ee7835a9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request/>
        <con:originalUri>https://www.exacttargetapis.com/internal/v1/customobjects/14254305-1c8e-e511-8d32-ac162db027d0/fields</con:originalUri>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}"/>
          <con:entry key="id" value="${Retrieve DE 2 to Confirm Create#Response#declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI'; //ns1:RetrieveResponseMsg[1]/ns1:Results[1]/ns1:ObjectID[1]}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Confirm Update of DE 2" id="53a7200f-8385-4790-b040-6330be9acdb2">
    <con:settings/>
    <con:config>
      <script>import groovy.json.*

if( context.loopIndex == null )
context.loopIndex = 0
def numberOfTimes = context.expand( '${#TestCase#numberOfTimes}' ).toInteger()


def fields = new JsonSlurper().parseText(context.expand( '${Retrieve DE 2 to Confirm Update#Response#$.fields}' ))

//def DEName = context.expand( '${#TestCase#objectName}' )

def newField = context.expand( '${Update#RawRequest#declare namespace ns1=\'http://exacttarget.com/wsdl/partnerAPI\'; //ns1:UpdateRequest[1]/ns1:Objects[2]/ns1:Fields[1]/ns1:Field[1]/ns1:Name[1]}' )

if (!fields.find { newField in it.name }) {
  if ( ++context.loopIndex &lt;  numberOfTimes ) {
    log.info "DE 2 not updated yet"
    sleep(1000)
      testRunner.gotoStepByName( "Retrieve DE 2 to Confirm Update" )
  }
  else {
    log.info "Timeout, this test should fail"
    testRunner.fail("DE 2 not updated after " + numberOfTimes.toString() + " retrieve attempts, timing out")
  }
}
else {
  log.info "DE 2 updated"
  testRunner.gotoStepByName( "Delete Both DEs" ) 
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="request" name="Delete Both DEs" id="4267a249-2b4f-4cb8-865b-985bf1f06ad7">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>ETFramework</con:interface>
      <con:operation>Delete</con:operation>
      <con:request name="Delete Both DEs" id="16cc19d6-e288-42b1-b9b7-31a2b5be2273" defaultOutgoingWss="" defaultIncomingWss="" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${soapapiendpoint}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <SOAP-ENV:Header>
     <h:fueloauth xmlns="http://exacttarget.com" xmlns:h="http://exacttarget.com">${#TestCase#accessToken}</h:fueloauth>
   </SOAP-ENV:Header>
 <SOAP-ENV:Body>
  <DeleteRequest xmlns="http://exacttarget.com/wsdl/partnerAPI">
      <Options>
   <SendResponseTo>
      <ResponseType>HTTPPost</ResponseType>
      <ResponseAddress>${#Project#fuelbinendpoint}/${Create New FuelBin#Response#$.id}</ResponseAddress>
      <RespondWhen>Always</RespondWhen>
      <IncludeResults>true</IncludeResults>
      <IncludeObjects>true</IncludeObjects>
   </SendResponseTo>
   
   <OrdinalID>0</OrdinalID>
   <RequestType>Asynchronous</RequestType>
</Options>
   <ns1:Objects xsi:type="ns1:DataExtension" xmlns:ns1="http://exacttarget.com/wsdl/partnerAPI">
    <ns1:CustomerKey>${Groovy Script To Generate CustomerKey For DE1#result}</ns1:CustomerKey>          
   </ns1:Objects>
   <ns1:Objects xsi:type="ns1:DataExtension" xmlns:ns1="http://exacttarget.com/wsdl/partnerAPI">
    <ns1:CustomerKey>${Groovy Script To Generate CustomerKey For DE2#result}</ns1:CustomerKey>          
   </ns1:Objects>
  </DeleteRequest>
 </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="fc5eafb3-1889-4bd0-8589-b143971b6fe3"/>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" name="Retrieve DE 1 to Confirm Delete" id="3ffc3074-f66f-4cd5-9509-a07a3a43b924">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>ETFramework</con:interface>
      <con:operation>Retrieve</con:operation>
      <con:request name="Retrieve DE 1 to Confirm Delete" id="d9412851-a03e-493f-b996-c89f86b4d693" defaultOutgoingWss="" defaultIncomingWss="" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${soapapiendpoint}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <soapenv:Header>
     <h:fueloauth xmlns="http://exacttarget.com" xmlns:h="http://exacttarget.com">${#TestCase#accessToken}</h:fueloauth>
  </soapenv:Header>
   <soapenv:Body>
      <RetrieveRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">
      <RetrieveRequest>
         <ObjectType>DataExtension</ObjectType>
         <Properties>ObjectID</Properties>
         <Properties>CustomerKey</Properties>
         <Properties>Name</Properties>
         <Properties>IsSendable</Properties>
         <Properties>CategoryID</Properties>
         <Filter xsi:type="SimpleFilterPart">
            <Property>CustomerKey</Property>
            <SimpleOperator>equals</SimpleOperator>
            <Value>${Groovy Script To Generate CustomerKey For DE1#result}</Value>
         </Filter>
      </RetrieveRequest>
   </RetrieveRequestMsg>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="47853253-cfed-4fd7-b9cc-fbf80534a1a8"/>
        <con:assertion type="XPath Match" id="9ca11bb7-46a9-41a3-9a37-4f103fd4d9c2" name="Check for existence of [ObjectID]" disabled="true">
          <con:configuration>
            <path>declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI';
exists( //ns1:RetrieveResponseMsg/ns1:Results/ns1:ObjectID)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Confirm Delete DE 1" id="1509ca5b-8329-46b6-affe-9a20e1bc6874">
    <con:settings/>
    <con:config>
      <script>import groovy.util.XmlSlurper

if( context.loopIndex == null )
context.loopIndex = 0
def numberOfTimes = context.expand( '${#TestCase#numberOfTimes}' ).toInteger()

def response = new XmlSlurper().parseText(context.expand( '${Retrieve DE 1 to Confirm Delete#Response#declare namespace ns1=\'http://exacttarget.com/wsdl/partnerAPI\'; //ns1:RetrieveResponseMsg[1]}' ))


if (response.Results.ObjectID.size() != 0) {
  if ( ++context.loopIndex &lt;  numberOfTimes ) {
    log.info "DE 1 not deleted yet"
    sleep(1000)
      testRunner.gotoStepByName( "Retrieve DE 1 to Confirm Delete" )
  }
  else {
    log.info "Timeout, this test should fail"
    testRunner.fail("DE 1 not deleted after " + numberOfTimes.toString() + " retrieve attempts, timing out")
  }
}
else {
  log.info "DE 1 deleted"
  testRunner.gotoStepByName( "Retrieve DE 2 to Confirm Delete" )
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="request" name="Retrieve DE 2 to Confirm Delete" id="14a0dd49-4312-4231-ae1c-928632a6702e">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>ETFramework</con:interface>
      <con:operation>Retrieve</con:operation>
      <con:request name="Retrieve DE 2 to Confirm Delete" id="d9412851-a03e-493f-b996-c89f86b4d693" defaultOutgoingWss="" defaultIncomingWss="" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${soapapiendpoint}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <soapenv:Header>
     <h:fueloauth xmlns="http://exacttarget.com" xmlns:h="http://exacttarget.com">${#TestCase#accessToken}</h:fueloauth>
  </soapenv:Header>
   <soapenv:Body>
      <RetrieveRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">
      <RetrieveRequest>
         <ObjectType>DataExtension</ObjectType>
         <Properties>ObjectID</Properties>
         <Properties>CustomerKey</Properties>
         <Properties>Name</Properties>
         <Properties>IsSendable</Properties>
         <Properties>CategoryID</Properties>
         <Filter xsi:type="SimpleFilterPart">
            <Property>CustomerKey</Property>
            <SimpleOperator>equals</SimpleOperator>
            <Value>${Groovy Script To Generate CustomerKey For DE2#result}</Value>
         </Filter>
      </RetrieveRequest>
   </RetrieveRequestMsg>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="47853253-cfed-4fd7-b9cc-fbf80534a1a8"/>
        <con:assertion type="XPath Match" id="9ca11bb7-46a9-41a3-9a37-4f103fd4d9c2" name="Check for existence of [ObjectID]" disabled="true">
          <con:configuration>
            <path>declare namespace ns1='http://exacttarget.com/wsdl/partnerAPI';
exists( //ns1:RetrieveResponseMsg/ns1:Results/ns1:ObjectID)</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Confirm Delete DE 2" id="c66710ae-cd6a-49c9-b421-4e1b28af0f8a">
    <con:settings/>
    <con:config>
      <script>import groovy.util.XmlSlurper

if( context.loopIndex == null )
context.loopIndex = 0
def numberOfTimes = context.expand( '${#TestCase#numberOfTimes}' ).toInteger()

def response = new XmlSlurper().parseText(context.expand( '${Retrieve DE 2 to Confirm Delete#Response#declare namespace ns1=\'http://exacttarget.com/wsdl/partnerAPI\'; //ns1:RetrieveResponseMsg[1]}' ))


if (response.Results.ObjectID.size() != 0) {
  if ( ++context.loopIndex &lt;  numberOfTimes ) {
    log.info "DE 2 not deleted yet"
    sleep(1000)
      testRunner.gotoStepByName( "Retrieve DE 2 to Confirm Delete" )
  }
  else {
    log.info "Timeout, this test should fail"
    testRunner.fail("DE 2 not deleted after " + numberOfTimes.toString() + " retrieve attempts, timing out")
  }
}
else {
  log.info "DE 2 deleted"
  testRunner.gotoStepByName( "Confirm HTTPPost Recorded Create Update Delete" )
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Confirm HTTPPost Recorded Create Update Delete" id="e059618d-ccd2-4531-9a81-0fd282ad6cec">
    <con:settings/>
    <con:config service="FuelBin" methodName="Get FuelBin Entry By ID" resourcePath="/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Confirm HTTPPost Recorded Create Update Delete" id="82a05212-e077-42c6-b41a-261a7c522303" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>https://fuelbin.dev.marketingcloudapps.com</con:endpoint>
        <con:request/>
        <con:originalUri>https://fuelbin.int.marketingcloudapps.com/SSqK3t1</con:originalUri>
        <con:assertion type="GroovyScriptAssertion" id="09233eef-5349-479b-8276-ceec9044e66a" name="Check for Three Posts in Bin" disabled="true">
          <con:configuration>
            <scriptText>import groovy.json.*

def posts = new JsonSlurper().parseText(context.expand( '${Confirm HTTPPost Recorded Create Update Delete#Response#$.posts}' ))

assert posts.size() == 3</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="09233eef-5349-479b-8276-ceec9044e66a" name="Check Payload Contents for Creation Details" disabled="true">
          <con:configuration>
            <scriptText>import groovy.json.*

def posts = new JsonSlurper().parseText(context.expand( '${Confirm HTTPPost Recorded Create Update Delete#Response#$.posts}' ))

def payloads = []

posts.each {
  payloads &lt;&lt; it.payload
}

assert payloads[2].find("Data Extension created.") != null
assert payloads[2].find(context.expand( '${#TestCase#objectName}' )) != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="09233eef-5349-479b-8276-ceec9044e66a" name="Check Payload Contents for Update Details" disabled="true">
          <con:configuration>
            <scriptText>import groovy.json.*

def posts = new JsonSlurper().parseText(context.expand( '${Confirm HTTPPost Recorded Create Update Delete#Response#$.posts}' ))

def payloads = []

posts.each {
  payloads &lt;&lt; it.payload
}

assert payloads[1].find("Data Extension updated.") != null
assert payloads[1].find(context.expand( '${#TestCase#objectName}' )) != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="09233eef-5349-479b-8276-ceec9044e66a" name="Check Payload Contents for Delete Details" disabled="true">
          <con:configuration>
            <scriptText>import groovy.json.*

def posts = new JsonSlurper().parseText(context.expand( '${Confirm HTTPPost Recorded Create Update Delete#Response#$.posts}' ))

def payloads = []

posts.each {
  payloads &lt;&lt; it.payload
}

assert payloads[0].find("Data Extension deleted.") != null
assert payloads[0].find(context.expand( '${#TestCase#objectName}' )) != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <entry key="id" value="${Create New FuelBin#Response#$.id}" xmlns="http://eviware.com/soapui/config"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="8c0ecb7e-0f97-4c23-8ef5-5ae7ad8d15f8">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Verify HTTPPost Entries" id="f8fb7483-8f82-4660-b734-9799b6f5c33e">
    <con:settings/>
    <con:config>
      <script><![CDATA[import groovy.json.*

def posts = new JsonSlurper().parseText(context.expand( '${Confirm HTTPPost Recorded Create Update Delete#Response#$.posts}' ))

if( context.loopIndex == null )
context.loopIndex = 0
def numberOfTimes = context.expand( '${#TestCase#numberOfTimes}' ).toInteger()

def payloads = []

def deName1 = context.expand( '${Groovy Script To Generate CustomerKey For DE1#result}' )

def deName2 = context.expand( '${Groovy Script To Generate CustomerKey For DE2#result}' )

def newFieldName1 = context.expand( '${Groovy Script To Generate New Field Name For DE1#result}' )

def newFieldName2 = context.expand( '${Groovy Script To Generate New Field Name For DE2#result}' )


def expectedPhrases = ["Data Extension created", deName1, deName2, newFieldName1, newFieldName2, "Data Extension deleted"]
def actualPhrases = []

if ( posts.size() != 3 ) {
  if ( ++context.loopIndex <  numberOfTimes ) {
    log.info "All HTTPPost entries not made yet"
    sleep(1000)
      testRunner.gotoStepByName( "Confirm HTTPPost Recorded Create Update Delete" )
  }
  else {
    log.info "Timeout, this test should fail"
    testRunner.fail("HTTPPost entries not made after " + numberOfTimes.toString() + " retrieve attempts, timing out")
    }
}
else {
  log.info "All HTTPPost entries present"
  posts.each {
    payloads << it.payload
    expectedPhrases.each { phrase -> 
      if ( payloads.find ({it.contains(phrase) }) && !actualPhrases.find ({it.contains(phrase) })) {
        actualPhrases << phrase
        log.info actualPhrases
      }
    }
  }
  assert actualPhrases.sort() == expectedPhrases.sort()
}]]></script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>objectName</con:name>
      <con:value>DE 3ON0BDHCT_QETesting</con:value>
    </con:property>
    <con:property>
      <con:name>numberOfTimes</con:name>
      <con:value>40</con:value>
    </con:property>
    <con:property>
      <con:name>accessToken</con:name>
      <con:value>cA5nNJfpUaSY7u6YTD5OqpcP</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>42393c59-20c2-4563-aec4-db7881e7fcbd</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ed892742-eba2-404c-8e64-fc892fd19d45</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>8f2cdf17-0d51-48ee-bec9-60dfe131ab46</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d38202aa-7862-4480-8cc6-7224aade0067</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1f617a35-b874-4806-8981-02eeed6a4166</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>41aa6783-ce82-4dbe-8731-0856b71fba64</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1651f6c1-e6be-4794-b7c9-324048676095</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d2ea8b13-56fd-4d8a-8952-11bad2f0311f</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>2805b965-a72b-464a-9d22-5d07dd5ebbc5</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f434ad7d-1bcf-4bd4-a2b2-c380c10199c7</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>514a7b8d-eae4-4d02-8bf3-897a082607db</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>908b706c-889d-4987-8e5b-99ee8d1ba4ef</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>47268302-6728-48ef-9a25-b3f2c2a18f40</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>00326f41-9f3b-48d9-ada8-f5865fc4847c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>02e8b0ac-2069-40cf-8897-3181b2a261af</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>6ba4ac9a-1c0f-4ea7-89ba-15d8e9b38fc1</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>53a7200f-8385-4790-b040-6330be9acdb2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>024c6554-1ae4-4335-aa8d-60a4557dd93c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>46f4a0da-1f0c-49fe-a1a0-7168b277adce</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f48a206c-d1c1-4c3c-8df2-9085583464d0</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>a5289936-5917-4b9d-b1db-08622f994d07</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ec5e9a9c-5c83-4c2f-a48d-d7dc094f3960</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1792c102-2a39-474e-8640-e90c311f2e58</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>cb696e66-3066-49d1-9b58-26d0cd845ab0</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>bc082335-57aa-400d-877d-e5b01b05d3c3</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>bf540dc0-77ad-479e-a69c-6c4caefd5fa8</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>4267a249-2b4f-4cb8-865b-985bf1f06ad7</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e059618d-ccd2-4531-9a81-0fd282ad6cec</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f8fb7483-8f82-4660-b734-9799b6f5c33e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>72098724-bd89-4c99-afea-269601e69366</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>523b2fe1-db53-4ea1-970a-2c4f4cbc0232</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
